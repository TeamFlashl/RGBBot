import asyncio
import threading
import time
import logging             # <-- —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å
import serial
import config

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import F
from aiogram import Router

API_TOKEN = config.API_TOKEN
SERIAL_PORT = config.SERIAL_PORT
BAUDRATE = config.BAUDRATE

# ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ =====
try:
    ser = serial.Serial(SERIAL_PORT, BAUDRATE, timeout=1)
    print(f"–û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç {SERIAL_PORT} @ {BAUDRATE}")
    time.sleep(2)
except Exception as e:
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç:", e)
    exit(1)

def start_serial():
    if not ser.is_open:
        try:
            ser.open()
            time.sleep(2)
            print(f"–û—Ç–∫—Ä—ã—Ç –ø–æ—Ä—Ç {SERIAL_PORT} @ {BAUDRATE}")
        except Exception as e:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç:", e)
            exit(1)

def stop_serial():
    if ser.is_open:
        ser.close()
        print(f"–ó–∞–∫—Ä—ã—Ç –ø–æ—Ä—Ç {SERIAL_PORT}")


# ===== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é =====
menuItems = {
    "buttonRed":        {"label": "üî¥ –ö—Ä–∞—Å–Ω—ã–π", "id": "red", "command": "mode 1", "visible": True},
    "buttonGreen":      {"label": "üü¢ –ó–µ–ª—ë–Ω—ã–π", "id": "green", "command": "mode 2", "visible": True},
    "buttonBlue":       {"label": "üîµ –°–∏–Ω–∏–π", "id": "blue", "command": "mode 3", "visible": True},
    "buttonWhite":      {"label": "‚ö™Ô∏è –ë–µ–ª—ã–π", "id": "white", "command": "mode 7", "visible": True},
    "buttonBlack":      {"label": "‚ö´Ô∏è –ß—ë—Ä–Ω—ã–π", "id": "black", "command": "mode 0", "visible": True},
    "buttonYellow":     {"label": "üü° –ñ—ë–ª—Ç—ã–π", "id": "yellow", "command": "mode 4", "visible": True},
    "buttonMagenta":    {"label": "üü£ –†–æ–∑–æ–≤—ã–π", "id": "magenta", "command": "mode 5", "visible": True},
    "buttonCyan":       {"label": "ü©µ –ì–æ–ª—É–±–æ–π", "id": "cyan", "command": "mode 6", "visible": True},
}



# ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def build_main_keyboard() -> types.ReplyKeyboardMarkup:
    kb_builder = ReplyKeyboardBuilder()
    for item in menuItems.values():
        if item["visible"]:
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è "label"
            kb_builder.button(text=item["label"])
    kb_builder.adjust(5)  # –ø–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥
    return kb_builder.as_markup(resize_keyboard=True)

# ===== –†–∞–±–æ—Ç–∞ —Å Arduino =====
def read_arduino_response(chat_id: int, bot: Bot):
    time.sleep(2)
    try:
        resp = ser.read_all().decode().strip()
        print(f"[Arduino] {resp}")
        # –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —é–∑–µ—Ä—É, –º–æ–∂–Ω–æ —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
        # asyncio.run(bot.send_message(chat_id, f"Arduino: {resp}"))
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è:", e)

def send_to_arduino(cmd_value: int, chat_id: int, bot: Bot):
    try:
        ser.write(str(cmd_value).encode())
        thread = threading.Thread(
            target=read_arduino_response,
            args=(chat_id, bot),
            daemon=True
        )
        thread.start()
    except Exception as e:
        asyncio.create_task(bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"))

# ===== –ú–∞—Ä—à—Ä—É—Ç—ã =====
router = Router()

@router.message(Command("start"))
@router.message(Command("help"))
async def cmd_start(message: types.Message):
    kb = build_main_keyboard()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è—é RGB-–ª–µ–Ω—Ç–æ–π.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–æ–π –ª–∏–±–æ /rgb R G B",
        reply_markup=kb
    )

@router.message(Command("rgb"))
async def cmd_rgb(message: types.Message):
    parts = message.text.split()
    if len(parts) != 4:
        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /rgb R G B")
    try:
        r, g, b = map(int, parts[1:])
        if any(not (0 <= v <= 255) for v in (r, g, b)):
            raise ValueError
    except ValueError:
        return await message.reply("–ó–Ω–∞—á–µ–Ω–∏—è 0‚Äì255")
    cmd_str = f"rgb {r} {g} {b}"
    try:
        ser.write(cmd_str.encode())
        await message.reply(f"–û—Ç–ø—Ä–∞–≤–∏–ª: {r},{g},{b}")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@router.message()
async def choose_color(message: types.Message, bot: Bot):
    # –∏—â–µ–º –≤ menuItems –ø–æ text == item["label"]
    selected = None
    for item in menuItems.values():
        if item["label"] == message.text:
            selected = item
            break

    if not selected:
        return await message.reply("–ù–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

    cmd_value = selected.get("command")
    if cmd_value is None:
        return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞")

    await message.reply(f"–í—ã–±—Ä–∞–ª–∏ {selected['label']}, —à–ª—ë–º {cmd_value}")
    send_to_arduino(cmd_value, message.chat.id, bot)

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
async def main():
    # –≤–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    # —Å–æ–∑–¥–∞—ë–º Bot –∏ Dispatcher
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º router
    dp.include_router(router)
    # –∑–∞–ø—É—Å–∫–∞–µ–º polling
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())