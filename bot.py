# ----- bot.py -----
import cmd
import config
import telebot
import serial
import time 

from config import TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = config.TOKEN
SERIAL_PORT = "COM3"   # –∏–ª–∏ COM3 –Ω–∞ Windows
BAUDRATE = 9600

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TOKEN)
try:
    ser = serial.Serial(SERIAL_PORT, BAUDRATE, timeout=1)
    print(f"–û—Ç–∫—Ä—ã—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç: {SERIAL_PORT} —Å baudrate {BAUDRATE}")
    time.sleep(2)  # –¥–∞—Ç—å Arduino –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
except Exception as e:
    print("–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç:", e)
    # exit(1)

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

markup = ReplyKeyboardMarkup(resize_keyboard=True)
markup.row(KeyboardButton("üî¥ –ö—Ä–∞—Å–Ω—ã–π"), KeyboardButton("üü¢ –ó–µ–ª—ë–Ω—ã–π"), KeyboardButton("üîµ –°–∏–Ω–∏–π"))
markup.row(KeyboardButton("‚ö™Ô∏è –ë–µ–ª—ã–π"), KeyboardButton("‚ö´Ô∏è –ß—ë—Ä–Ω—ã–π"))
markup.row(KeyboardButton("üî¥ –º–∏–≥–∞–ª–∫–∞ üîµ"))


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø —É–ø—Ä–∞–≤–ª—é RGB-–ª–µ–Ω—Ç–æ–π.\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π —á–µ—Ä–µ–∑ /rgb R G B",
                     reply_markup=markup)

@bot.message_handler(commands=['rgb'])
def custom_rgb(message):
    parts = message.text.split()
    if len(parts) != 4:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /start")
        return
    try:
        r, g, b = map(int, parts[1:])
        for v in (r, g, b):
            if not 0 <= v <= 255:
                raise ValueError
    except:
        bot.reply_to(message, "–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ 0‚Äì255")
        return
    # send_to_arduino(r, g, b, message)
    M_send_to_arduino(type, message)

@bot.message_handler(func=lambda m: True)
def choose_color(message):
    text = message.text.lower()
    bot.reply_to(message, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç: " + text)

    if "–∫—Ä–∞—Å–Ω" in text:
        M_send_to_arduino(1, message)
    elif "–∑–µ–ª—ë–Ω—ã–π –º–∏–≥–∞–ª–∫–∞" in text:
        M_send_to_arduino(130, message)
    elif "–∑–µ–ª—ë–Ω" in text:
        M_send_to_arduino(2, message)
    elif "—Å–∏–Ω" in text:
        M_send_to_arduino(3, message)
    elif "–±–µ–ª" in text:
        M_send_to_arduino(4, message)
    elif "–≤—ã–∫–ª" in text:
        M_send_to_arduino(0, message)
    elif "–º–∏–≥–∞–ª–∫–∞" in text:
        M_send_to_arduino(130, message)
    elif "131" in text:
        M_send_to_arduino(131, message)
    else:
        M_send_to_arduino(text, message)
        # bot.reply_to(message, "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ /rgb R G B")

"""
def send_mode1_to_arduino(message): # TODO ??
    try:
        ser.write(b"mode1\n")
        time.sleep(0.1)
        resp = ser.readline().decode().strip()
        if resp.startswith("OK"):
            bot.reply_to(message, "–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º: –ó–µ–ª—ë–Ω—ã–π –º–∏–≥–∞–ª–∫–∞")
        else:
            bot.reply_to(message, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Arduino")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Arduino: {e}")
"""

def M_send_to_arduino(type, message):
    cmd = f"{type}\n"  # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è Arduino
    try:
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Arduino: {cmd.strip()}")
        ser.write(cmd.encode())  # TODO TEST –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ 3
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Arduino: {cmd.strip()}") # 10/5
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç Arduino
        time.sleep(0.1)
        resp = ser.readline().decode().strip()
        if resp.startswith("OK"):
            bot.reply_to(message, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç TYPE={type}")
        else:
            bot.reply_to(message, "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Arduino")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ Arduino: {e}")


def sum(a, b):  
    return a + b    

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    ser.write(b"131\n")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ Arduino –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ CYAN
    time.sleep(0.1)  # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç Arduino
    bot.infinity_polling()
